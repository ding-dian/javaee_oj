<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hnitoj.mapper.ContestMapper" >
  <resultMap id="BaseResultMap" type="com.hnitoj.pojo.Contest" >
    <id column="contest_id" property="contestId" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="defunct" property="defunct" jdbcType="CHAR" />
    <result column="privated" property="privated" jdbcType="TINYINT" />
    <result column="langmask" property="langmask" jdbcType="INTEGER" />
    <result column="password" property="password" jdbcType="CHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.hnitoj.pojo.Contest" extends="BaseResultMap" >
    <result column="description" property="description" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    contest_id, title, start_time, end_time, defunct, privated, langmask, password, user_id
  </sql>
  <sql id="Blob_Column_List" >
    description
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.hnitoj.pojo.ContestExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from contest
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hnitoj.pojo.ContestExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from contest
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from contest
    where contest_id = #{contestId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from contest
    where contest_id = #{contestId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hnitoj.pojo.ContestExample" >
    delete from contest
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hnitoj.pojo.Contest" >
    insert into contest (contest_id, title, start_time, 
      end_time, defunct, privated, 
      langmask, password, user_id, 
      description)
    values (#{contestId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{defunct,jdbcType=CHAR}, #{privated,jdbcType=TINYINT}, 
      #{langmask,jdbcType=INTEGER}, #{password,jdbcType=CHAR}, #{userId,jdbcType=INTEGER}, 
      #{description,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hnitoj.pojo.Contest" >
    insert into contest
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="contestId != null" >
        contest_id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="defunct != null" >
        defunct,
      </if>
      <if test="privated != null" >
        privated,
      </if>
      <if test="langmask != null" >
        langmask,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="description != null" >
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="contestId != null" >
        #{contestId,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="defunct != null" >
        #{defunct,jdbcType=CHAR},
      </if>
      <if test="privated != null" >
        #{privated,jdbcType=TINYINT},
      </if>
      <if test="langmask != null" >
        #{langmask,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        #{password,jdbcType=CHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hnitoj.pojo.ContestExample" resultType="java.lang.Integer" >
    select count(*) from contest
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update contest
    <set >
      <if test="record.contestId != null" >
        contest_id = #{record.contestId,jdbcType=INTEGER},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.defunct != null" >
        defunct = #{record.defunct,jdbcType=CHAR},
      </if>
      <if test="record.privated != null" >
        privated = #{record.privated,jdbcType=TINYINT},
      </if>
      <if test="record.langmask != null" >
        langmask = #{record.langmask,jdbcType=INTEGER},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=CHAR},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.description != null" >
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update contest
    set contest_id = #{record.contestId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      defunct = #{record.defunct,jdbcType=CHAR},
      privated = #{record.privated,jdbcType=TINYINT},
      langmask = #{record.langmask,jdbcType=INTEGER},
      password = #{record.password,jdbcType=CHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      description = #{record.description,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update contest
    set contest_id = #{record.contestId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      defunct = #{record.defunct,jdbcType=CHAR},
      privated = #{record.privated,jdbcType=TINYINT},
      langmask = #{record.langmask,jdbcType=INTEGER},
      password = #{record.password,jdbcType=CHAR},
      user_id = #{record.userId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hnitoj.pojo.Contest" >
    update contest
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="defunct != null" >
        defunct = #{defunct,jdbcType=CHAR},
      </if>
      <if test="privated != null" >
        privated = #{privated,jdbcType=TINYINT},
      </if>
      <if test="langmask != null" >
        langmask = #{langmask,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=CHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where contest_id = #{contestId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hnitoj.pojo.Contest" >
    update contest
    set title = #{title,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      defunct = #{defunct,jdbcType=CHAR},
      privated = #{privated,jdbcType=TINYINT},
      langmask = #{langmask,jdbcType=INTEGER},
      password = #{password,jdbcType=CHAR},
      user_id = #{userId,jdbcType=INTEGER},
      description = #{description,jdbcType=LONGVARCHAR}
    where contest_id = #{contestId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hnitoj.pojo.Contest" >
    update contest
    set title = #{title,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      defunct = #{defunct,jdbcType=CHAR},
      privated = #{privated,jdbcType=TINYINT},
      langmask = #{langmask,jdbcType=INTEGER},
      password = #{password,jdbcType=CHAR},
      user_id = #{userId,jdbcType=INTEGER}
    where contest_id = #{contestId,jdbcType=INTEGER}
  </update>
</mapper>